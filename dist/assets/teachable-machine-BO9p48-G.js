import{t as y,i as T,f as C,d as c,m as u,a as N,s as w}from"./models-index-Cd6ulEPZ.js";const p=224,$=100;let f=null,g=null;function L(E=null){if(g)return console.log("Using existing TeachableMachine instance"),g;class M{constructor(){var e,t,n,s;if(this.infoTexts=[],this.confidenceBars=[],this.training=-1,this.videoPlaying=!1,this.numClasses=2,this.classNames=["笑脸","哭脸"],this.confusionMatrix=[[0,0],[0,0]],this.biasSamples={0:[],1:[]},this.trainingButtons=[],this.examples={0:[],1:[]},this.video=document.querySelector("#teachable-chart .teachable-container video"),this.controls=document.getElementById("teachable-controls"),!this.video||!this.controls){console.error("Video or controls element not found"),alert("无法找到视频或控制元素，请检查页面结构。");return}this.showLoadingMessage(),(e=document.getElementById("reset-matrix"))==null||e.addEventListener("click",()=>this.resetConfusionMatrix()),(t=document.getElementById("sample-p"))==null||t.addEventListener("click",()=>this.sampleClass(0,20)),(n=document.getElementById("sample-n"))==null||n.addEventListener("click",()=>this.sampleClass(1,5)),(s=document.getElementById("run-bias-experiment"))==null||s.addEventListener("click",()=>this.runBiasExperiment()),this.setupUI(),this.setupWebcam(),this.loadModel(E)}showLoadingMessage(){const e=document.querySelector("#teachable-chart .teachable-container .video-container");if(e){const t=document.createElement("div");t.id="model-loading-message",t.style.cssText="position: absolute; top: 10px; left: 10px; color: white; background: rgba(0,0,0,0.7); padding: 10px; border-radius: 5px;",t.textContent="正在等待 MobileNet 模型加载...",e.appendChild(t)}}hideLoadingMessage(){const e=document.getElementById("model-loading-message");e&&e.remove()}async loadModel(e){if(console.log("Checking model cache: preloadedModel=",!!e,"cachedModel=",!!f),e){console.log("Using preloaded MobileNet model"),this.model=e,f=e,this.hideLoadingMessage(),this.start();return}if(f){console.log("Using cached MobileNet model"),this.model=f,this.hideLoadingMessage(),this.start();return}console.warn("No model available, waiting for preload to complete"),this.hideLoadingMessage(),this.disableWebcamFeatures()}async infer(e,t=!1){return this.model?y(()=>{try{let n=T.resizeBilinear(e,[p,p]);n=n.div(255),n=n.sub(.5).mul(2);const s=n.expandDims(0);if(t){const o=this.model.execute(s,"module_apply_default/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6");return console.log("Inference completed for embedding"),o}else{const o=this.model.predict(s);return console.log("Inference completed for prediction"),o}}catch(n){return console.error("推理失败:",n),null}}):(console.warn("Cannot infer: model not loaded"),null)}async sampleClass(e,t=1){if(!this.videoPlaying){alert("请先点击页面或按住训练按钮以启用摄像头！");return}console.log(`Starting sample collection for class ${e} (${this.classNames[e]}), count: ${t}`);let n=null,s=null;try{if(n=C(this.video),s=await this.infer(n,!0),!s){console.error("Failed to collect samples: inference returned null"),alert("模型未加载或推理失败，无法采集样本。");return}for(;this.examples[e].length+t>$;){const i=this.examples[e].shift();i&&c(i)}for(;this.biasSamples[e].length+t>$;){const i=this.biasSamples[e].shift();i&&c(i)}for(let i=0;i<t;i++){const l=s.clone();this.examples[e].push(l),this.biasSamples[e].push(l.clone())}const o=this.examples[e].length;this.infoTexts[e]&&this.confidenceBars[e]&&(this.infoTexts[e].innerText=` ${o} 个样本`),console.log(`Sampled ${t} frames for class ${e} (${this.classNames[e]}), total: ${o}`),alert(`已为 ${e===0?"P":"N"}: ${this.classNames[e]} 采集 ${t} 帧样本！当前样本数：${o}`)}finally{n&&c(n),s&&c(s),console.log(`Active tensors after sampleClass: ${u().numTensors}`)}}async runBiasExperiment(){console.log("Running bias experiment..."),this.examples[0].forEach(i=>c(i)),this.examples[1].forEach(i=>c(i)),this.examples={0:[],1:[]};const e=this.biasSamples[0].slice(0,50),t=this.biasSamples[1].slice(0,5);e.forEach(i=>this.examples[0].push(i.clone())),t.forEach(i=>this.examples[1].push(i.clone()));const n={0:this.examples[0].length,1:this.examples[1].length};if(!n[0]&&!n[1]){console.warn("No samples available for bias experiment"),alert("请先为 P 类或 N 类采集样本！");return}let s=null,o=null;try{if(s=C(this.video),o=await this.infer(s,!0),!o){console.error("Bias experiment failed: inference returned null"),alert("模型未加载或推理失败，无法运行实验。");return}const i=await this.predictClass(o);for(let a=0;a<this.numClasses;a++)if(this.infoTexts[a]&&this.confidenceBars[a])if(i.classIndex===a?this.infoTexts[a].classList.add("bold"):this.infoTexts[a].classList.remove("bold"),n[a]>0){const r=Math.round(i.confidences[a]*100);this.infoTexts[a].innerText=` ${n[a]} 个样本 - 置信度：${r}%`,this.confidenceBars[a].style.width=`${r}%`}else this.infoTexts[a].innerText=" 无样本",this.confidenceBars[a].style.width="0%";const l=`实验结果：预测为 ${i.classIndex===0?"P":"N"}: ${this.classNames[i.classIndex]}，置信度 ${Math.round(i.confidences[i.classIndex]*100)}%。P 类样本数：${n[0]||0}，N 类样本数：${n[1]||0}。由于“N: ${this.classNames[1]}”样本较少，模型可能偏向“P: ${this.classNames[0]}”。`;document.getElementById("bias-output").textContent=l,document.getElementById("bias-result").style.display="block",console.log("Bias experiment completed successfully")}finally{s&&c(s),o&&c(o),this.biasSamples[0].forEach(i=>c(i)),this.biasSamples[1].forEach(i=>c(i)),this.biasSamples={0:[],1:[]},console.log(`Active tensors after runBiasExperiment: ${u().numTensors}`)}}updateConfidenceOverlay(e){const t=document.querySelector("#teachable-chart .teachable-container .confidence-overlay");if(t){t.innerHTML="";for(let n=0;n<this.numClasses;n++){const s=document.createElement("div");s.style.cssText="color: white; background: rgba(0,0,0,0.7); padding: 5px; margin: 5px; border-radius: 3px;";const o=e&&e.confidences[n]?Math.round(e.confidences[n]*100):0;s.textContent=`${this.classNames[n]}: ${o}%`,e&&e.classIndex===n&&(s.style.fontWeight="bold"),t.appendChild(s)}}}updateConfusionMatrixUI(){console.log("Updating confusion matrix UI...");const e=document.getElementById("confusion-matrix-wrapper");e.innerHTML="";const t=document.createElement("table");t.id="confusion-matrix";const n=document.createElement("thead"),s=document.createElement("tr");s.appendChild(document.createElement("th")),this.classNames.forEach((i,l)=>{const a=document.createElement("th");a.textContent=`预测${l===0?"P":"N"}: ${i}`,s.appendChild(a)}),n.appendChild(s),t.appendChild(n);const o=document.createElement("tbody");this.classNames.forEach((i,l)=>{const a=document.createElement("tr"),r=document.createElement("td");r.textContent=`实际${l===0?"P":"N"}: ${i}`,a.appendChild(r),this.classNames.forEach((d,h)=>{const m=document.createElement("td"),b=document.createElement("span");b.id=`count-${l}-${h}`,b.textContent=this.confusionMatrix[l][h];const v=document.createElement("button");v.textContent="+",v.addEventListener("click",()=>this.incrementCell(l,h));const x=document.createElement("button");x.textContent="-",x.addEventListener("click",()=>this.decrementCell(l,h)),m.appendChild(b),m.appendChild(v),m.appendChild(x),a.appendChild(m)}),o.appendChild(a)}),t.appendChild(o),e.appendChild(t),this.updateMetrics(),console.log("Confusion matrix UI updated successfully")}incrementCell(e,t){this.confusionMatrix[e][t]++,this.updateConfusionMatrixUI()}decrementCell(e,t){this.confusionMatrix[e][t]>0&&(this.confusionMatrix[e][t]--,this.updateConfusionMatrixUI())}resetConfusionMatrix(){this.confusionMatrix=[[0,0],[0,0]],this.updateConfusionMatrixUI()}updateMetrics(){const e=this.confusionMatrix[0][0],t=this.confusionMatrix[0][1],n=this.confusionMatrix[1][0],s=this.confusionMatrix[1][1],o=e+s+n+t,i=o>0?((e+s)/o).toFixed(3):0,l=e+n>0?(e/(e+n)).toFixed(3):0,a=e+t>0?(e/(e+t)).toFixed(3):0,r=l&&a?2*l*a/(parseFloat(l)+parseFloat(a)).toFixed(3):0,d=document.getElementById("example");o===0?d.innerHTML="<strong>示例</strong>：当前无数据，请输入 TP、TN、FP、FN。":d.innerHTML=`
          <strong>当前 TP=${e}, TN=${s}, FP=${n}, FN=${t}</strong>: <br>
          准确度=(${e}+${s})/(${e}+${s}+${n}+${t})=${i}<br>
          精确度=${e}/(${e}+${n})=${l}<br>
          召回率=${e}/(${e}+${t})=${a}<br>
          F1=2*(${l}*${a})/(${l}+${a})=${r}
        `}createClassControl(e){const t=document.createElement("div");t.className="control-group";const n=document.createElement("input");n.type="text",n.value=this.classNames[e],n.addEventListener("input",()=>{this.classNames[e]=n.value||(e===0?"笑脸":"哭脸"),this.trainingButtons[e].innerText=`训练 ${e===0?"P":"N"}: ${this.classNames[e]}`,this.updateConfusionMatrixUI()});const s=document.createElement("button");s.innerText=`训练 ${e===0?"P":"N"}: ${this.classNames[e]}`,this.trainingButtons[e]=s;const o=document.createElement("span");o.className="info-text",o.innerText=" 无样本";const i=document.createElement("div");i.className="confidence-bar-container";const l=document.createElement("div");return l.className="confidence-bar",i.appendChild(l),t.appendChild(n),t.appendChild(s),t.appendChild(o),t.appendChild(i),s.addEventListener("mousedown",()=>{console.log(`mousedown event for class ${e} (${this.classNames[e]})`),this.training=e,!this.videoPlaying&&this.model?this.video.play().then(()=>{console.log("Video playback started"),this.sampleClass(e,1)}).catch(a=>{console.error("Video playback failed:",a),alert("请先点击页面以启用摄像头！")}):this.model?this.sampleClass(e,1):(console.warn("Model not loaded, cannot collect samples"),alert("模型未加载，无法采集样本。"))}),s.addEventListener("mouseup",()=>{console.log(`mouseup event for class ${e} (${this.classNames[e]})`),this.training=-1}),this.infoTexts[e]=o,this.confidenceBars[e]=l,t}reset(){this.examples[0].forEach(e=>c(e)),this.examples[1].forEach(e=>c(e)),this.biasSamples[0].forEach(e=>c(e)),this.biasSamples[1].forEach(e=>c(e)),this.examples={0:[],1:[]},this.biasSamples={0:[],1:[]},this.training=-1,this.infoTexts.forEach((e,t)=>{e&&(e.innerText=" 无样本",e.classList.remove("bold"),this.confidenceBars[t].style.width="0%")}),this.updateConfidenceOverlay(null),this.resetConfusionMatrix(),console.log(`Active tensors after reset: ${u().numTensors}`)}setupUI(){this.controls.innerHTML="",this.confusionMatrix=[[0,0],[0,0]],this.trainingButtons=[];const e=document.querySelector("#teachable-chart .teachable-container .video-container");if(e){const s=document.createElement("div");s.className="confidence-overlay",s.style.cssText="position: absolute; top: 10px; left: 10px; z-index: 10;",e.appendChild(s)}for(let s=0;s<this.numClasses;s++)this.controls.appendChild(this.createClassControl(s));const t=document.createElement("div");t.className="controls-container";const n=document.createElement("button");n.innerText="重置模型",n.className="reset-button",n.addEventListener("click",()=>this.reset()),t.appendChild(n),this.controls.appendChild(t),this.updateConfusionMatrixUI()}setupWebcam(){if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia){console.error("浏览器不支持 navigator.mediaDevices 或 getUserMedia"),alert("您的浏览器不支持摄像头访问，请使用支持 WebRTC 的现代浏览器（如 Chrome、Firefox）并确保通过 HTTPS 访问网站。"),this.disableWebcamFeatures();return}if(!(window.location.protocol==="https:"||window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1")){console.error("getUserMedia 要求 HTTPS 环境"),alert("摄像头访问需要通过 HTTPS 加载页面。请确保网站使用 HTTPS 协议。"),this.disableWebcamFeatures();return}navigator.mediaDevices.getUserMedia({video:!0,audio:!1}).then(t=>{this.video.srcObject=t,this.video.width=p,this.video.height=p,this.video.addEventListener("playing",()=>{this.videoPlaying=!0,console.log("Webcam stream started")}),this.video.addEventListener("paused",()=>{this.videoPlaying=!1,console.log("Webcam stream paused")})}).catch(t=>{console.error("无法访问摄像头:",t),alert("无法访问摄像头，请检查摄像头权限、硬件设置，或确保网站通过 HTTPS 访问。"),this.disableWebcamFeatures()})}disableWebcamFeatures(){const e=document.querySelector("#teachable-chart .teachable-container .video-container");e&&(e.innerHTML=`
          <p style="color: white; background: rgba(0,0,0,0.7); padding: 10px; border-radius: 5px;">
            摄像头功能不可用，请检查模型加载状态或浏览器支持。混淆矩阵功能仍可使用。
          </p>
        `),this.videoPlaying=!1,console.log("Webcam features disabled")}start(){if(!this.model){console.warn("Model not loaded, cannot start animation");return}this.timer&&this.stop(),this.timer=requestAnimationFrame(this.animate.bind(this))}stop(){this.video.pause(),cancelAnimationFrame(this.timer)}async predictClass(e){return e?y(()=>{const t={};let n=-1/0,s=0;for(let i=0;i<this.numClasses;i++){if(this.examples[i].length===0){t[i]=0;continue}const l=this.examples[i].map(r=>e.sub(r).square().sum()),a=N(w(l)).dataSync()[0];t[i]=1/(1+a),t[i]>n&&(n=t[i],s=i)}const o=Object.values(t).reduce((i,l)=>i+l,0);if(o>0)for(const i in t)t[i]/=o;return console.log("Prediction completed:",{classIndex:s,confidences:t}),{classIndex:s,confidences:t}}):(console.warn("Cannot predict: logits not available"),{classIndex:0,confidences:{}})}async animate(){if(!this.videoPlaying||!this.model){console.log("Animation skipped: video not playing or model not loaded"),this.timer=requestAnimationFrame(this.animate.bind(this));return}let e=null,t=null;try{if(e=C(this.video),t=await this.infer(e,!0),!t){console.warn("Inference failed in animate"),this.updateConfidenceOverlay(null);return}const n=await this.predictClass(t);this.updateConfidenceOverlay(n);for(let s=0;s<this.numClasses;s++){const o=this.examples[s].length;if(this.infoTexts[s]&&this.confidenceBars[s]){n.classIndex===s?this.infoTexts[s].classList.add("bold"):this.infoTexts[s].classList.remove("bold");const i=Math.round(n.confidences[s]*100);this.infoTexts[s].innerText=` ${o} 个样本 - 置信度：${i}%`,this.confidenceBars[s].style.width=`${i}%`}}}catch(n){console.error("Animation frame error:",n),this.updateConfidenceOverlay(null)}finally{e&&c(e),t&&c(t),console.log(`Active tensors after animate: ${u().numTensors}`),this.timer=requestAnimationFrame(this.animate.bind(this))}}}return g=new M,g}export{L as t};
